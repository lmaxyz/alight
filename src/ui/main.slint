import { Button, ComboBox, HorizontalBox, VerticalBox, GridBox } from "std-widgets.slint";
import { MonitorSelector, MonitorData } from "monitor_selector.slint";


export component MainWindow inherits Window {
    callback toggle_capturing();
    callback capture_target_selected();
    callback update_monitor_preview <=> monitor-selector.update_monitor_preview;

    in-out property <string> selected_com_port <=> com_port_selector.current-value;
    in-out property <[string]> available_com_ports <=> com_port_selector.model;
    
    in-out property <int> selected_monitor <=> monitor-selector.selected_monitor;
    in-out property <[MonitorData]> monitors_data <=> monitor_selector.monitors_data;

    in-out property <bool> is_capture_running: false;

    title: "Alight";
    background: @linear-gradient(30deg, rgb(150, 240, 170) 0, rgb(250, 150, 170) 50%, rgb(150, 150, 240) 100%);

    VerticalBox {
        alignment: start;

        HorizontalBox {
            alignment: LayoutAlignment.space-between;
            max-height: 70px;

            VerticalBox {
                padding: 0;
                alignment: LayoutAlignment.end;
                
                Text {
                    text: "COM PORT";
                    color: white;
                    font-weight: 600;
                    font-size: 14px;
                }
    
                com_port_selector := ComboBox {
                    enabled: self.model.length > 0 ? is_capture_running ? false : true : false;
                }
            }
            
            VerticalBox {
                padding: 0;
                alignment: LayoutAlignment.end;

                Button {
                    text: is_capture_running ? "Выключить" : "Включить";
                    enabled: root.selected_com_port != "" && monitor_selector.selected_monitor > 0 ? true : false;

                    clicked => {
                        root.toggle_capturing();
                    }
                }
            }
        }

        HorizontalBox {
            padding-top: 0;

            Rectangle {
                height: 2px;
                background: #f0efef;
                border-radius: 1px;
            }
        }
        
        HorizontalBox {
            alignment: start;

            monitor_selector := MonitorSelector {
                enabled: !is_capture_running;
                alignment: LayoutAlignment.start;
            }
        }
        
    }
}